var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DopEFW","category":"page"},{"location":"#DopEFW","page":"Home","title":"DopEFW","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DopEFW.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DopEFW]","category":"page"},{"location":"#DopEFW.param_color","page":"Home","title":"DopEFW.param_color","text":"Dict containing the colors for each parameter.\n\n\n\n\n\n","category":"constant"},{"location":"#DopEFW.param_marker","page":"Home","title":"DopEFW.param_marker","text":"Dict containing the markers for each parameter.\n\n\n\n\n\n","category":"constant"},{"location":"#DopEFW.Formula","page":"Home","title":"DopEFW.Formula","text":"struct Formula\n\nA structure to represent a mathematical formula or function along with its parameters and associated paper.\n\nFields\n\nfunc::Function: A function that defines the mathematical operation or formula.\nparameters::Vector{String}: A vector of strings representing the names of the parameters used in the formula.\npaper::String: A string indicating the source or reference (e.g., paper title) associated with the formula.\n\nExample\n\nformula_instance = Formula(my_func, [\"x\", \"y\"], \"Title of the Paper\")\n\n\n\n\n\n","category":"type"},{"location":"#DopEFW.bootstrap-Union{Tuple{T}, Tuple{Vector{T}, Int64, Function, Int64}} where T","page":"Home","title":"DopEFW.bootstrap","text":"bootstrap(data::Vector{T}, n_samples::Int, stat_func::Function, seed::Int) where T\n\nPerforms bootstrap resampling on a given dataset to compute statistics.\n\nArguments\n\ndata::Vector{T}: A vector of data points from which bootstrap samples will be drawn.\nn_samples::Int: The number of bootstrap samples to generate.\nstat_func::Function: A function that takes a vector of samples and returns a statistic (e.g., mean, median).\nseed::Int: An integer seed for the random number generator to ensure reproducibility.\n\nReturns\n\nA vector of bootstrap statistics computed from the generated samples.\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.df_bootstrap-Tuple{DataFrames.DataFrame, Formula}","page":"Home","title":"DopEFW.df_bootstrap","text":"df_bootstrap(simulations::DataFrame, formula::Formula; n_samples = 1000, stat_func = mean, seed = 1234)\n\nPerforms bootstrap resampling on a given formula from data from the simulation dataframe to compute statistics.\n\nArguments\n\nsimulations::DataFrame: A dataframe containing the simulations.\nformula::Formula: The Formula object that will be bootstrapped.\nn_samples = 1000: The number of bootstrap samples to generate.\nstat_func = mean: A function that takes a vector of samples and returns a statistic (e.g., mean, median).\nseed = 1234: The random seed\n\nReturns\n\nA vector of bootstrap statistics computed from the generated samples.\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.get_sheet_names-Tuple{String}","page":"Home","title":"DopEFW.get_sheet_names","text":"get_sheet_names(file_path::String) -> Vector{String}\n\nRetrieves the names of all sheets in an Excel file.\n\nArguments\n\nfile_path::String: The path to the Excel file from which to read the sheet names.\n\nReturns\n\nA vector of strings containing the names of the sheets in the specified Excel file.\n\nExample\n\nsheet_names = get_sheet_names(\"example.xlsx\")\nprintln(sheet_names)  # Output: [\"Sheet1\", \"Sheet2\", \"Data\", ...]\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.indices_names-Tuple{Formula}","page":"Home","title":"DopEFW.indices_names","text":"indices_names(formula::Formula) -> Vector{String}\n\nGenerates names for the Sobol sensitivity indices based on the parameters defined in a given Formula.\n\nArguments\n\nformula::Formula: An instance of the Formula struct, which contains the function, parameters, and associated paper.\n\nReturns\n\nA vector of strings representing the names of the Sobol sensitivity indices. This includes combinations of the parameters and total order indices.\n\nExample\n\n\nformula_instance = Formula(x -> x[1] + x[2], [\"x\", \"y\", \"z\"], \"Title of the Paper\")\n\nindex_names = indices_names(formula_instance)\nprintln(index_names)  # Output: [\"x\", \"y\", \"z\", \"x_y\", \"x_T\", \"y_T\", \"z_T\"]\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.read_excel_sheets-Tuple{String}","page":"Home","title":"DopEFW.read_excel_sheets","text":"read_excel_sheets(file_path::String) -> DataFrame\n\nReads all sheets from an Excel file and combines them into a single DataFrame.\n\nArguments\n\nfile_path::String: The path to the Excel file from which to read the sheets.\n\nReturns\n\nA DataFrame containing the combined data from all sheets in the specified Excel file. Each sheet's data is transformed and includes an additional column indicating the sheet name.\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.simulation-Tuple{Formula, String}","page":"Home","title":"DopEFW.simulation","text":"simulation(formula::Formula, dataset::String; ci::Int = 10, path::String = \"DopEFW\\data\\pro\\data.csv\", samples::Int = 10^6) -> DataFrame\n\nPerforms a sensitivity analysis simulation using the specified formula and dataset, generating Sobol sensitivity indices.\n\nArguments\n\nformula::Formula: An instance of the Formula struct that contains the function to evaluate and its parameters.\ndataset::String: The name of the dataset (paper) to filter the data for the simulation.\nci::Int: The confidence interval percentile to use (default is 10).\npath::String: The file path to the CSV file containing the datasets (default is \"DopEFW\\data\\pro\\data.csv\").\nsamples::Int: The number of samples to use for the Quasi-Monte Carlo simulation (default is 1,000,000).\n\nReturns\n\nA DataFrame containing the results of the sensitivity analysis simulation, for each week of the dataset.\n\nExample\n\n# Define a simple function and create a Formula instance\n\nformula_instance = Formula(x -> x[1] + x[2], [\"x1\", \"x2\"], \"Title of the Paper\")\n\nresults = simulation(formula_instance, \"DatasetName\")\nprintln(results)\n\n\n\n\n\n","category":"method"},{"location":"#DopEFW.split_string-Tuple{String}","page":"Home","title":"DopEFW.split_string","text":"split_string(s::String) -> Tuple{String, String}\n\nSplits a string into two parts at the first occurrence of a digit.\n\nArguments\n\ns::String: The input string to be split.\n\nReturns\n\nA tuple containing two strings:\n\nThe first element is the substring before the first digit.\nThe second element is the substring from the first digit to the end of the string. If no digit is found, the second element will be an empty string.\n\nExample\n\nresult = split_string(\"Hello123World\")\nprintln(result)  # Output: (\"Hello\", \"123World\")\n\n\n\n\n\n","category":"method"}]
}
